district_list <- dbSendQuery(con,query)
con <- dbConnect(MySQL(), user="root", password="", dbname="mcadb", host="localhost")
district_list <- dbSendQuery(con,query)
district_list <- fetch(district_list, n=-1)
district_list <- rbind(string_all,district_list)
string_all <- "ALL"
district_list <- rbind(string_all,district_list)
runApp('D:/deepak fertilisers/Market-Channel Analysis/app_MCA.R')
runApp('D:/deepak fertilisers/Market-Channel Analysis/app_MCA.R')
string_all <- "ALL"
con <- dbConnect(MySQL(), user="root", password="", dbname="mcadb", host="localhost")
runApp('D:/deepak fertilisers/Market-Channel Analysis/app_MCA.R')
query = "select distinct District from mca_master where 1 "
var <- c("Andhra Pradesh", "Telangana")
c1 <- ""
for(i in 1:length(var))
{
if(i == 1){
c1 <- paste(c1, "'", var[i], "'", sep ="")
}else{
c1 <- paste(c1, ",'", var[i], "'", sep ="")
}
}
query = paste(query, " and State in (", c1, ")", sep = "")
print(query)
district_list <- dbSendQuery(con,query)
district_list <- fetch(district_list, n=-1)
district_list <- rbind(string_all,district_list)
return(district_list)
View(district_list)
runApp('D:/deepak fertilisers/Market-Channel Analysis/app_MCA.R')
string_all <- "ALL"
query = "select distinct District from mca_master where 1 "
var <- c("Andhra Pradesh", "Telangana")
runApp('D:/deepak fertilisers/Market-Channel Analysis/app_MCA.R')
con <- dbConnect(MySQL(), user="root", password="", dbname="mcadb", host="localhost")
zdbDisconnect(con)
write.csv(rid1,"C:/Users/vamsi.sunku/Desktop/MCAData.csv")
library('shiny')
library('shinydashboard')
library('RMySQL')
library('data.table')
library('zoo')
library('highcharter')
library('imputeTS')
library('ggfortify')
library('lubridate')
library('forecast')
library("stats")
library("plotly")
library("leaflet")
library("ggmap")
library("vegan")
library("DT")
library("RColorBrewer")
library("shinythemes")
library("rAmCharts")
write.csv(rid1,"C:/Users/vamsi.sunku/Desktop/MCAData.csv")
con <- dbConnect(MySQL(), user="root", password="", dbname="mcadb", host="localhost")
req2 <- dbSendQuery(con, "select State, District, Company, AgencyName, Product, Qty, SalesDate from mca_master")
rid2 <- fetch(req2, n=-1)
library(gapminder)
install.packages("gapminder")
library(gapminder)
library(ggplot2)
library(gganimate)
install.packages("gganimate")
library(gganimate)
library(gganimate)
install.packages("installr")
library(installr)
version
devtools::install_github("dgrtwo/gganimate")
library(gganimate)
p &lt;- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = continent, frame = year)) +
geom_point() +
scale_x_log10() +
theme_bw()
p <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = continent, frame = year)) +
geom_point() +
scale_x_log10() +
theme_bw()
gganimate(p)
gganimate(p, "#271_gganimate.gif")
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = continent, frame = year)) +
geom_point() +
scale_x_log10() +
theme_bw()
gganimate(p)
p <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = continent, frame = year)) +
geom_point() +
scale_x_log10() +
theme_bw()
gganimate(p)
gganimate(p)
36-29
round(0.00,2)
round(0.001,2)
round(0.001,3)
library(gapminder)
library(ggplot2)
library(gganimate)
p <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = continent, frame = year)) +
geom_point() +
scale_x_log10() +
theme_bw()
gganimate(p)
library(h2o)
h2o.init(nthreads=-1,max_mem_size = "2G")
library(h2o)
h2o.init(nthreads=-1,max_mem_size = "2G")
h2o.init(nthreads=-1,max_mem_size = "2G")
h2o.removeAll() # Clean slate - just in case the cluster was already running
library(h2o)
h2o.init()
library(h2o)
h2o.init()
library(h2o)
h2o.init()
version
localH2O = h2o.init()
h2o.init {h2o}
h2o.init
?h2o.init
install.packages("h2o")
require(h2o)
h2o.init()
localH2O = h2o.init(ip = "127.0.0.1", port = 54321, startH2O = FALSE)
localH2O = h2o.init(ip = "localhost", port = 54321, startH2O = FALSE)
sessionInfo()
localH2O = h2o.init(ip = "localhost", port = 54321, startH2O = FALSE,nthreads=-1)
localH2O = h2o.init()
localH2O = h2o.init(nthreads = -1, max_mem_size = '2g', ip = "127.0.0.1", port = 50001)
localH2O = h2o.init(nthreads = -1, max_mem_size = '2g', ip = "10.6.108.246", port = 8000)
localH2O = h2o.init(nthreads = -1, max_mem_size = '2g', ip = "localhost", port = 8000)
localH2O = h2o.init()
Sys.getenv("JAVA_HOME")
require(h2o)
localH2O = h2o.init()
install.packages("h2o", dependencies = TRUE)
install.packages("h2o", dependencies = TRUE)
require(h2o)
localH2O = h2o.init()
library(curl)
h2o.init()
require(h2o)
localH2O = h2o.init()
?h2o.init
localH2O = h2o.init(port = 54331)
library(shiny); runApp('D:/churn modelling/churn-v2/churnmodelling_latest.R')
runApp('D:/churn modelling/churn-v2/churnmodelling_latest.R')
runApp('D:/churn modelling/churn-v2/churnmodelling_latest.R')
runApp('D:/churn modelling/churn-v2/churnmodelling_latest.R')
churn1 <- read.csv("Churn_Modelling.csv")
setwd("D:/churn modelling/churn-v2")
churn1 <- read.csv("Churn_Modelling.csv")
categorical_one <- churn1[,c(5,6)]
numerical_one <- churn1[,c(4,7,8,9,10,13)]
cat_one = dummy.data.frame(categorical_one, sep = ".")
data_one = cbind(cat_one,churn1$HasCrCard,churn1$IsActiveMember,numerical_one,churn1$Exited)
sq_num =  as.data.frame((numerical_one)^2)
names(sq_num) = paste(names(sq_num),"square",sep = "_")
root_num =  as.data.frame((numerical_one)^0.5)
names(root_num) = paste(names(root_num),"root",sep = "_")
scale_data = as.data.frame(lapply(numerical_one,scale))
names(scale_data) = paste(names(scale_data),"Scale",sep = "_")
data_one <- cbind(data_one,sq_num,root_num)
names(data_one)[c(6,7)] <- c("HasCrCard","IsActiveMember")
set.seed(7000)
ind_one <- sample(2,nrow(data_one), replace=TRUE, prob=c(0.7,0.3))
train_one <- data_one[ind_one==1,]
test_one <- data_one[ind_one==2,]
split_data_one <- sample(2,nrow(test_one), replace=TRUE, prob=c(0.7,0.3))
validation_one <- data_one[split_data_one==1,]
test_f <- data_one[split_data_one==2,]
glm.model <- glm(train_one$`churn1$Exited` ~ Geography.Germany +
Gender.Female +
IsActiveMember +
Age +
NumOfProducts_square +
Age_square +
NumOfProducts_root +
Age_root
,
family=binomial(link='logit'),data=train_one,control = list(maxit = 100))
f_val <- as.data.frame(glm.model$fitted.values)
names(f_val) = "value"
tn_dat <- cbind(train_one,f_val)
p <- predict(glm.model, newdata=test_one[,-14],type = "response")
predicted_val = data.frame(p)
names(predicted_val) = "value"
ts_dat <- cbind(test_one,predicted_val)
churn_data <- rbind(tn_dat,ts_dat)
churn_data$value <- churn_data$value * 100
churn_data <- churn_data[order(-churn_data$value),]
top_churn <- churn_data
top_churn
top_churn <- top_churn[top_churn$value > quantile(top_churn$value,prob=1-4/100),]
top_churn$value
top_churn$status
Top_churn1 <- top_churn
for(i in 1:nrow(top_churn))
{
if(top_churn[i,27] <= c[2])
top_churn$status[i] = "Dead"
else if(top_churn[i,27] > c[2] & top_churn[i,27] <= c[3])
top_churn$status[i] = "Cold"
else if(top_churn[i,27] > c[3] & top_churn[i,27] <= c[4])
top_churn$status[i] = "Warm"
else if(top_churn[i,27] > c[4] & top_churn[i,27] <= c[5])
top_churn$status[i] = "Hot"
}
c = quantile(top_churn$value)
Top_churn1 <- top_churn
for(i in 1:nrow(top_churn))
{
if(top_churn[i,27] <= c[2])
top_churn$status[i] = "Dead"
else if(top_churn[i,27] > c[2] & top_churn[i,27] <= c[3])
top_churn$status[i] = "Cold"
else if(top_churn[i,27] > c[3] & top_churn[i,27] <= c[4])
top_churn$status[i] = "Warm"
else if(top_churn[i,27] > c[4] & top_churn[i,27] <= c[5])
top_churn$status[i] = "Hot"
}
top_churn$status
top_churn[i,27]
top_churn$value
hist(top_churn$value)
c[2]
top_churn[2,27]
names(top_churn)
TRUEhist(top_churn$value)
library(MASS)
truehist(top_churn$value)
c
plot(c)
names(top_churn)
top_churn$Customer <- churn1$CustomerId
top_churn$Customer <- train$CustomerId
colnames(top_churn)[27] <- "ScoreCard"
colnames(top_churn)
ScoreCard <- top_churn$ScoreCard
truehist(ScoreCard)
runApp('churnmodelling_latest.R')
id = churn1$CustomerId[sample(nrow(churn1$CustomerId), nrow(Top_churn1)), ]
id = churn1[sample(nrow(churn1), nrow(Top_churn1)), ]
Top_churn1$CustomerId = id
names(Top_churn1)
Top_churn1 = Top_churn1[,c(28,27,1:26)]
runApp('working_churn.R')
id
runApp('working_churn.R')
runApp('working_churn.R')
runApp('working_churn.R')
runApp('working_churn.R')
45002+7191
runApp('D:/claim Prediction/CLP.R')
# Packages to be installed
list.of.packages <- c("Rcpp","dplyr","shiny","tidyr" ,"shinydashboard","highcharter","ROSE","rAmCharts",
"plotly","dummies","ROCR","caret","e1071","ggplot2","shinythemes","randomForest","h2o")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, dependencies = TRUE)
library("Rcpp")
library("shiny")
library("shinydashboard")
library("plotly")
library("dummies")
library("ROCR")
library("caret")
library("e1071")
library("ggplot2")
library("highcharter")
library("shinythemes")
library("randomForest")
library("h2o")
library("ROSE")
library("rAmCharts")
setwd("D:/claim Prediction")
train_full <- read.csv("train_set.csv")
# test_full <- read.csv("test_set.csv")
names(train_full) <- c("Row_ID","Household_ID","Vehicle","Calendar_Year","Model_Year",
"Blind_Make","Blind_Model","Blind_Submodel","FeatureCat1","FeatureCat2",
"FeatureCat3","FeatureCat4","FeatureCat5","FeatureCat6","FeatureCat7","FeatureCat8",
"FeatureCat9","FeatureCat10","FeatureCat11","FeatureCat12",
"OrdCat","Variable1","Variable2","Variable3","Variable4","Variable5","Variable6",
"Variable7","Variable8","NVCat","NVVar1","NVVar2","NVVar3","NVVar4","Claim_Amount")
# names(test_full) <- c("Row_ID","Household_ID","Vehicle","Calendar_Year","Model_Year",
#                        "Blind_Make","Blind_Model","Blind_Submodel","FeatureCat1","FeatureCat2",
#                        "FeatureCat3","FeatureCat4","FeatureCat5","FeatureCat6","FeatureCat7","FeatureCat8",
#                        "FeatureCat9","FeatureCat10","FeatureCat11","FeatureCat12",
#                        "OrdCat","Variable1","Variable2","Variable3","Variable4","Variable5","Variable6",
#                        "Variable7","Variable8","NVCat","NVVar1","NVVar2","NVVar3","NVVar4")
outlier.cap <- function(x){
quantiles <- quantile( x, c(.03, .97 ) )
x[ x < quantiles[1] ] <- quantiles[1]
x[ x > quantiles[2] ] <- quantiles[2]
x
}
train_full[,c(22:29,31:34)] <- data.frame(lapply(train_full[,c(22:29,31:34)], outlier.cap)) # applicable on numeric data
# test_full[,c(22:29,31:34)] <- data.frame(lapply(test_full[,c(22:29,31:34)], outlier.cap)) # applicable on numeric data
## Random generated rows
train_full = train_full[sample(nrow(train_full), 4000000), ]
# train_full$Claim_Amount <- as.factor(train_full$Claim_Amount)
## Standard
ClaimsAcceptanceThreshold <- 3*sd(train_full$Claim_Amount)
## Converting dependent value as binary
train_full$Claim_Amount <- (ifelse(train_full$Claim_Amount < ClaimsAcceptanceThreshold, 0, 1))
train_full$Claim_Amount <- as.factor(train_full$Claim_Amount)
train_full <- ROSE(Claim_Amount ~ ., train_full, seed=12345)$data
table(train_full$Claim_Amount)
#
# train_full2_1 <- subset(train_full, train_full$Claim_Amount == 1)
# train_full <- (rbind.data.frame(train_full, train_full2_1, train_full2_1,
#                                 train_full2_1,train_full2_1))
# table(train_full$Claim_Amount)
# densityplot(train_full$Claim_Amount[train_full$Claim_Amount > 0])
#### Train data ####
# train_full$Claim_Amount = ifelse(train_full$Claim_Amount >= 0.5,1,0)
# colnames(train_full)[35] <-"Claim_Amount"
## convert variable as.factor
# train_full$Claim_Amount = as.factor(train_full$Claim_Amount)
## Replace ? with NA
train_full[train_full=="?"]<-NA
## Remove the columns that has more than 42% missing
train_full_omited <- train_full[, -which(colMeans(is.na(train_full)) > 0.42)]
## Remove the rows that has more than 0.0025% missing
train_full_omited <- train_full_omited[-which(rowMeans(is.na(train_full_omited)) > 0.002788), ]
head(unique(make.names(train_full_omited$Blind_Make)))
head(unique(make.names(train_full_omited$Blind_Make)), n=10)
runApp('CLP.R')
table(train_full_omited == "?")
runApp('CLP.R')
runApp('CLP.R')
setwd("D:/churn modelling/churn-v2")
runApp('churnmodelling_latest_sai.R')
runApp('D:/claim Prediction/CLP.R')
## specify the memory size
localH2O = h2o.init(nthreads=-1,max_mem_size = "4G", port = 54331)
h2o.removeAll()
train_full_omited_original <- as.h2o(train_full_omited)
prostate.split <- h2o.splitFrame(data=train_full_omited_original, ratios=0.75)
prostate.train <- prostate.split[[1]]
prostate.test <- prostate.split[[2]]
## Random Forest ##
#######################################################################################
system.time(
mod <- h2o.randomForest( x = 1:33 , y = 34, training_frame = prostate.train,   ntrees = 300,
mtries = 3, max_depth = 4, seed = 112222)
)
## Train details for random forest ##
train_notarget <- as.data.frame(prostate.train)
train_notarget <- train_notarget[,-34]
# h2o.removeAll()
train_full_notarget <- as.h2o(train_notarget)
predict.rforest_train <- as.data.frame(h2o.predict(mod, train_full_notarget))
colnames(predict.rforest_train)[1] <- c("Claim_Amount")
predict.rforest_train$Claim_Amount <- as.factor(predict.rforest_train$Claim_Amount)
prostate.train_actual <- as.data.frame(prostate.train[34])
prostate.train_actual$Claim_Amount <- as.factor(prostate.train_actual$Claim_Amount)
random_table_train <- table(predict.rforest_train$Claim_Amount,prostate.train_actual$Claim_Amount)
random_train_accuracy <- sum(diag(random_table_train))/sum(random_table_train)*100
random_train_recall <- ((random_table_train[2,2])/(random_table_train[2,2]+random_table_train[2,1])*100)
random_train_precision <-((random_table_train[2,2])/(random_table_train[2,2]+random_table_train[1,2])*100)
## Test details for random forest ##
test_notarget <- as.data.frame(prostate.test)
test_notarget <- test_notarget[,-34]
test_full <- as.h2o(test_notarget)
predict.rforest <- as.data.frame(h2o.predict(mod, test_full))
colnames(predict.rforest)[1] <- c("Claim_Amount")
prostate.test_actual <- as.data.frame(prostate.test[34])
random_table_test <- table(predict.rforest$Claim_Amount,prostate.test_actual$Claim_Amount)
random_test_accuracy <- sum(diag(random_table_test))/sum(random_table_test)*100
random_test_recall <- ((random_table_test[2,2])/(random_table_test[2,2]+random_table_test[2,1])*100)
random_test_precision <-((random_table_test[2,2])/(random_table_test[2,2]+random_table_test[1,2])*100)
#######################################################################################
### Below codes are still under Progress ###
## Logistic ##
######################################################################################
# Binomial: Y variables are discrete and valued only at 0 or 1.
gen <- h2o.glm(x = 1:33 , y = 34,training_frame = prostate.train, family="binomial", standardize=TRUE,
lambda_search=TRUE, nfolds = 10, alpha = 0.5)
## glm on train Data
train_notarget_glm <- as.data.frame(prostate.train)
train_notarget_glm <- train_notarget_glm[,-34]
train_full_notarget_glm <- as.h2o(train_notarget_glm)
predict.glm_train <- as.data.frame(h2o.predict(gen, train_full_notarget_glm))
colnames(predict.glm_train)[1] <- c("Claim_Amount")
predict.glm_train$Claim_Amount <- as.factor(predict.glm_train$Claim_Amount)
prostate.train_actual_glm <- as.data.frame(prostate.train[34])
prostate.train_actual_glm$Claim_Amount <- as.factor(prostate.train_actual_glm$Claim_Amount)
glm_table_train <- table(predict.glm_train$Claim_Amount,prostate.train_actual_glm$Claim_Amount)
glm_train_accuracy <- sum(diag(glm_table_train))/sum(glm_table_train)*100
glm_train_recall <- ((glm_table_train[2,2])/(glm_table_train[2,2]+glm_table_train[2,1])*100)
glm_train_precision <-((glm_table_train[2,2])/(glm_table_train[2,2]+glm_table_train[1,2])*100)
## glm on Test Data
pred = as.data.frame(h2o.predict(object=gen, newdata=prostate.test))
colnames(pred)[1] <- c("Claim_Amount")
prostate.test_actual <- as.data.frame(prostate.test[34])
glm_table_test <- table(pred$Claim_Amount,prostate.test_actual$Claim_Amount)
glm_test_accuracy <- sum(diag(glm_table_test))/sum(glm_table_test)*100
glm_test_recall <- ((glm_table_test[2,2])/(glm_table_test[2,2]+glm_table_test[2,1])*100)
glm_test_precision <-((glm_table_test[2,2])/(glm_table_test[2,2]+glm_table_test[1,2])*100)
## GBM ##
######################################################################################
predictors <- c(  "Row_ID","Household_ID","Vehicle","Calendar_Year","Model_Year",
"Blind_Make","Blind_Model","Blind_Submodel","FeatureCat1","FeatureCat2",
"FeatureCat3","FeatureCat4","FeatureCat5","FeatureCat6","FeatureCat8",
"FeatureCat9","FeatureCat10","FeatureCat11","FeatureCat12","OrdCat",
"Variable1","Variable2","Variable3","Variable4","Variable5",
"Variable6","Variable7","Variable8","NVCat","NVVar1","NVVar2","NVVar3","NVVar4")
response <- "Claim_Amount"
gbm <- h2o.gbm(x = predictors, y = response, training_frame = prostate.train)
# gbm <- h2o.gbm(x = predictors, y = response, training_frame = h2o.rbind(prostate.train, prostate.test), nfolds = 4, seed = 0xDECAF)
## Train Data ##
train_notarget_gbm <- as.data.frame(prostate.train)
train_notarget_gbm <- train_notarget_gbm[,-34]
train_full_notarget_gbm <- as.h2o(train_notarget_gbm)
predict.gbm_train <- as.data.frame(h2o.predict(gbm, train_full_notarget_gbm))
colnames(predict.gbm_train)[1] <- c("Claim_Amount")
predict.gbm_train$Claim_Amount <- as.factor(predict.gbm_train$Claim_Amount)
prostate.train_actual_gbm <- as.data.frame(prostate.train[34])
prostate.train_actual_gbm$Claim_Amount <- as.factor(prostate.train_actual_gbm$Claim_Amount)
gbm_table_train <- table(predict.gbm_train$Claim_Amount,prostate.train_actual_gbm$Claim_Amount)
gbm_train_accuracy <- sum(diag(gbm_table_train))/sum(gbm_table_train)*100
gbm_train_recall <- ((gbm_table_train[2,2])/(gbm_table_train[2,2]+gbm_table_train[2,1])*100)
gbm_train_precision <-((gbm_table_train[2,2])/(gbm_table_train[2,2]+gbm_table_train[1,2])*100)
## Test Data Set ##
pred_gbm = as.data.frame(h2o.predict(object=gbm, newdata=prostate.test))
colnames(pred_gbm)[1] <- c("Claim_Amount")
prostate.test_actual <- as.data.frame(prostate.test[34])
gbm_table_test <- table(pred_gbm$Claim_Amount,prostate.test_actual$Claim_Amount)
gbm_test_accuracy <- sum(diag(gbm_table_test))/sum(gbm_table_test)*100
gbm_test_recall <- ((gbm_table_test[2,2])/(gbm_table_test[2,2]+gbm_table_test[2,1])*100)
gbm_test_precision <-((gbm_table_test[2,2])/(gbm_table_test[2,2]+gbm_table_test[1,2])*100)
x <- data.frame("Model"=c("GBM","Random Forest","Logistic Regression"),
"Accuracy"=c(round(gbm_test_accuracy*100,2),round(random_test_accuracy,2),round(glm_test_accuracy*100,2)),
"Recall"=c(round(gbm_test_recall*100,2),round(random_test_recall,2),round(glm_test_recall*100,2)) )
x
x <- data.frame("Model"=c("GBM","Random Forest","Logistic Regression"),
"Accuracy"=c(round(gbm_test_accuracy,2),round(random_test_accuracy,2),round(glm_test_accuracy,2)),
"Recall"=c(round(gbm_test_recall,2),round(random_test_recall,2),round(glm_test_recall,2)) )
x
hc <- highchart() %>%
hc_xAxis(categories = x$Model) %>%
hc_add_series(name = "ACCURACY", data = x$Accuracy) %>%
hc_add_series(name = "RECALL", data = x$Recall) %>%
hc_chart(type = "column")
hc
x <- data.frame("Model"=c("GBM","Random Forest","Logistic Regression"),
"Accuracy"=c(round(gbm_test_accuracy*100,2),round(random_test_accuracy,2),round(glm_test_accuracy*100,2)),
"Recall"=c(round(gbm_test_recall*100,2),round(random_test_recall,2),round(glm_test_recall*100,2)) )
x
x <- data.frame("Model"=c("GBM","Random Forest","Logistic Regression"),
"Accuracy"=c(round(gbm_test_accuracy,2),round(random_test_accuracy,2),round(glm_test_accuracy,2)),
"Recall"=c(round(gbm_test_recall,2),round(random_test_recall,2),round(glm_test_recall,2)) )
x
fourfoldplot(gbm_table_test, color = c("#CC6666", "#99CC99"),
conf.level = 0, margin = 1, main = "Confusion Matrix for GBM")
fourfoldplot(random_table_test, color = c("#CC6666", "#99CC99"),
conf.level = 0, margin = 1, main = "Confusion Matrix for Random Forest")
fourfoldplot(glm_table_test, color = c("#CC6666", "#99CC99"),
conf.level = 0, margin = 1, main = "Confusion Matrix for Logistic")
gen@model$coefficients
v <- data.frame(gen@model$coefficients)
v$color <- ""
for(i in 1:nrow(v)){
if(v$gen.model.coefficients[i] >= 0){
v$color[i] = "blue"
} else {
v$color[i] = "red"
}
}
names(v) = c("coefficients","color")
v$category = rownames(v)
amBarplot(x = "category", y = "coefficients", data = v,
horiz = T) %>%
amOptions( main = "",
mainColor = "#68838B", mainSize = 40, creditsPosition = "top-right")
confusionMatrix(data=lr.predictions, reference=test$`train_full_omited$y`,positive='1')
plot(x=train_full_omited[,input$ind_x], y=train_full_omited[,input$ind_y],xlab = input$ind_x, ylab= input$ind_y)
plot(x=train_full_omited[,1], y=train_full_omited[,input$ind_y],xlab = input$ind_x, ylab= input$ind_y)
plot(x=train_full_omited[,1], y=train_full_omited[,input$2],xlab = input$ind_x, ylab= input$ind_y)
plot(x=train_full_omited[,1], y=train_full_omited[,2],xlab = input$ind_x, ylab= input$ind_y)
plot(x=train_full_omited[,1], y=train_full_omited[,2],xlab = 1, ylab= 2)
blank.names <- function(dat){
for(i in 1:ncol(dat)){
names(dat)[i] <- paste(rep(" ",i),collapse="")
}
return(dat)
}
runApp('D:/claim Prediction/CLP.R')
library()
library(corrgram)
corr(train_full_omited)
cor(train_full_omited)
?cor
localH2O = h2o.init(nthreads=-1,max_mem_size = "4G", port = 54331)
h2o.removeAll()
train_full_omited_original <- as.h2o(train_full_omited)
h2o.cor(train_full_omited_original)
corrplot(train_full_omited)
cor(train_full_omited$Blind_Make)
h2o.cor(train_full_omited$Blind_Make)
h2o.cor(train_full_omited_original)
c <- data.frame(h2o.cor(train_full_omited_original))
View(c)
setwd("D:/All_POCs/Demand Forecast")
runApp('DF_app.R')
runApp('DF_app.R')
runApp('DF_app.R')
runApp('DF_app.R')
